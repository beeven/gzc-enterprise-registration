//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
// 
#pragma warning disable 1591

namespace EnterpriseRegistration.UserProfile.WebAccreditReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AccreditReaderServiceSoap", Namespace="10.53.1.162")]
    public partial class AccreditReaderService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFunctionsInApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildrenInRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesByFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersByFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserInRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserInAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoesUserHasPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoesUserHasAllPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesOfUserInViewApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOUScopesOfUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetsBusinessScopesOfUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeScopesOfUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOuScopesOfUserFunctionsInViewApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessScopesByUserFunctionsInViewApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeScopesByUserFunctionsInViewApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAdminUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessScopesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeScopesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFunctionsOfUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AccreditReaderService() {
            this.Url = global::EnterpriseRegistration.UserProfile.Properties.Settings.Default.EnterpriseRegistration_UserProfile_WebAccreditReference_AccreditReaderService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetApplicationsCompletedEventHandler GetApplicationsCompleted;
        
        /// <remarks/>
        public event GetFunctionsInApplicationCompletedEventHandler GetFunctionsInApplicationCompleted;
        
        /// <remarks/>
        public event GetChildrenInRolesCompletedEventHandler GetChildrenInRolesCompleted;
        
        /// <remarks/>
        public event GetRolesByFunctionCompletedEventHandler GetRolesByFunctionCompleted;
        
        /// <remarks/>
        public event GetUsersByFunctionCompletedEventHandler GetUsersByFunctionCompleted;
        
        /// <remarks/>
        public event IsUserInRolesCompletedEventHandler IsUserInRolesCompleted;
        
        /// <remarks/>
        public event IsUserInAllRolesCompletedEventHandler IsUserInAllRolesCompleted;
        
        /// <remarks/>
        public event DoesUserHasPermissionsCompletedEventHandler DoesUserHasPermissionsCompleted;
        
        /// <remarks/>
        public event DoesUserHasAllPermissionsCompletedEventHandler DoesUserHasAllPermissionsCompleted;
        
        /// <remarks/>
        public event GetRolesOfUserInViewApplicationCompletedEventHandler GetRolesOfUserInViewApplicationCompleted;
        
        /// <remarks/>
        public event GetOUScopesOfUserRolesCompletedEventHandler GetOUScopesOfUserRolesCompleted;
        
        /// <remarks/>
        public event GetsBusinessScopesOfUserRolesCompletedEventHandler GetsBusinessScopesOfUserRolesCompleted;
        
        /// <remarks/>
        public event GetTimeScopesOfUserRolesCompletedEventHandler GetTimeScopesOfUserRolesCompleted;
        
        /// <remarks/>
        public event GetOuScopesOfUserFunctionsInViewApplicationCompletedEventHandler GetOuScopesOfUserFunctionsInViewApplicationCompleted;
        
        /// <remarks/>
        public event GetBusinessScopesByUserFunctionsInViewApplicationCompletedEventHandler GetBusinessScopesByUserFunctionsInViewApplicationCompleted;
        
        /// <remarks/>
        public event GetTimeScopesByUserFunctionsInViewApplicationCompletedEventHandler GetTimeScopesByUserFunctionsInViewApplicationCompleted;
        
        /// <remarks/>
        public event IsAdminUserCompletedEventHandler IsAdminUserCompleted;
        
        /// <remarks/>
        public event GetBusinessScopesCompletedEventHandler GetBusinessScopesCompleted;
        
        /// <remarks/>
        public event GetTimeScopesCompletedEventHandler GetTimeScopesCompleted;
        
        /// <remarks/>
        public event GetFunctionsOfUserCompletedEventHandler GetFunctionsOfUserCompleted;
        
        /// <remarks/>
        public event GetRolesCompletedEventHandler GetRolesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetApplications", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetApplications(string appValue, AccreditCategory appCategory, string extraAttributes) {
            object[] results = this.Invoke("GetApplications", new object[] {
                        appValue,
                        appCategory,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationsAsync(string appValue, AccreditCategory appCategory, string extraAttributes) {
            this.GetApplicationsAsync(appValue, appCategory, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetApplicationsAsync(string appValue, AccreditCategory appCategory, string extraAttributes, object userState) {
            if ((this.GetApplicationsOperationCompleted == null)) {
                this.GetApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetApplications", new object[] {
                        appValue,
                        appCategory,
                        extraAttributes}, this.GetApplicationsOperationCompleted, userState);
        }
        
        private void OnGetApplicationsOperationCompleted(object arg) {
            if ((this.GetApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationsCompleted(this, new GetApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetFunctionsInApplication", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFunctionsInApplication(string funcValues, AccreditCategory funcCategory, string appValue, AccreditCategory appCategory, FunctionCategories funcCategories, string extraAttributes) {
            object[] results = this.Invoke("GetFunctionsInApplication", new object[] {
                        funcValues,
                        funcCategory,
                        appValue,
                        appCategory,
                        funcCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFunctionsInApplicationAsync(string funcValues, AccreditCategory funcCategory, string appValue, AccreditCategory appCategory, FunctionCategories funcCategories, string extraAttributes) {
            this.GetFunctionsInApplicationAsync(funcValues, funcCategory, appValue, appCategory, funcCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetFunctionsInApplicationAsync(string funcValues, AccreditCategory funcCategory, string appValue, AccreditCategory appCategory, FunctionCategories funcCategories, string extraAttributes, object userState) {
            if ((this.GetFunctionsInApplicationOperationCompleted == null)) {
                this.GetFunctionsInApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFunctionsInApplicationOperationCompleted);
            }
            this.InvokeAsync("GetFunctionsInApplication", new object[] {
                        funcValues,
                        funcCategory,
                        appValue,
                        appCategory,
                        funcCategories,
                        extraAttributes}, this.GetFunctionsInApplicationOperationCompleted, userState);
        }
        
        private void OnGetFunctionsInApplicationOperationCompleted(object arg) {
            if ((this.GetFunctionsInApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFunctionsInApplicationCompleted(this, new GetFunctionsInApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetChildrenInRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChildrenInRoles(string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetChildrenInRoles", new object[] {
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChildrenInRolesAsync(string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetChildrenInRolesAsync(parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, roleValues, roleCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetChildrenInRolesAsync(string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetChildrenInRolesOperationCompleted == null)) {
                this.GetChildrenInRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildrenInRolesOperationCompleted);
            }
            this.InvokeAsync("GetChildrenInRoles", new object[] {
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes}, this.GetChildrenInRolesOperationCompleted, userState);
        }
        
        private void OnGetChildrenInRolesOperationCompleted(object arg) {
            if ((this.GetChildrenInRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildrenInRolesCompleted(this, new GetChildrenInRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetRolesByFunction", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRolesByFunction(string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, string extraAttributes) {
            object[] results = this.Invoke("GetRolesByFunction", new object[] {
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesByFunctionAsync(string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, string extraAttributes) {
            this.GetRolesByFunctionAsync(appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetRolesByFunctionAsync(string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, string extraAttributes, object userState) {
            if ((this.GetRolesByFunctionOperationCompleted == null)) {
                this.GetRolesByFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesByFunctionOperationCompleted);
            }
            this.InvokeAsync("GetRolesByFunction", new object[] {
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        extraAttributes}, this.GetRolesByFunctionOperationCompleted, userState);
        }
        
        private void OnGetRolesByFunctionOperationCompleted(object arg) {
            if ((this.GetRolesByFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesByFunctionCompleted(this, new GetRolesByFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetUsersByFunction", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsersByFunction(string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetUsersByFunction", new object[] {
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersByFunctionAsync(string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetUsersByFunctionAsync(parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetUsersByFunctionAsync(string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetUsersByFunctionOperationCompleted == null)) {
                this.GetUsersByFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersByFunctionOperationCompleted);
            }
            this.InvokeAsync("GetUsersByFunction", new object[] {
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes}, this.GetUsersByFunctionOperationCompleted, userState);
        }
        
        private void OnGetUsersByFunctionOperationCompleted(object arg) {
            if ((this.GetUsersByFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersByFunctionCompleted(this, new GetUsersByFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/IsUserInRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserInRoles(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories) {
            object[] results = this.Invoke("IsUserInRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserInRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories) {
            this.IsUserInRolesAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, roleValues, roleCategory, delegationCategories, null);
        }
        
        /// <remarks/>
        public void IsUserInRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, object userState) {
            if ((this.IsUserInRolesOperationCompleted == null)) {
                this.IsUserInRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserInRolesOperationCompleted);
            }
            this.InvokeAsync("IsUserInRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories}, this.IsUserInRolesOperationCompleted, userState);
        }
        
        private void OnIsUserInRolesOperationCompleted(object arg) {
            if ((this.IsUserInRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserInRolesCompleted(this, new IsUserInRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/IsUserInAllRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserInAllRoles(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories) {
            object[] results = this.Invoke("IsUserInAllRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserInAllRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories) {
            this.IsUserInAllRolesAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, roleValues, roleCategory, delegationCategories, null);
        }
        
        /// <remarks/>
        public void IsUserInAllRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, object userState) {
            if ((this.IsUserInAllRolesOperationCompleted == null)) {
                this.IsUserInAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserInAllRolesOperationCompleted);
            }
            this.InvokeAsync("IsUserInAllRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories}, this.IsUserInAllRolesOperationCompleted, userState);
        }
        
        private void OnIsUserInAllRolesOperationCompleted(object arg) {
            if ((this.IsUserInAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserInAllRolesCompleted(this, new IsUserInAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/DoesUserHasPermissions", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesUserHasPermissions(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories) {
            object[] results = this.Invoke("DoesUserHasPermissions", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoesUserHasPermissionsAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories) {
            this.DoesUserHasPermissionsAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, delegationCategories, null);
        }
        
        /// <remarks/>
        public void DoesUserHasPermissionsAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, object userState) {
            if ((this.DoesUserHasPermissionsOperationCompleted == null)) {
                this.DoesUserHasPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesUserHasPermissionsOperationCompleted);
            }
            this.InvokeAsync("DoesUserHasPermissions", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories}, this.DoesUserHasPermissionsOperationCompleted, userState);
        }
        
        private void OnDoesUserHasPermissionsOperationCompleted(object arg) {
            if ((this.DoesUserHasPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesUserHasPermissionsCompleted(this, new DoesUserHasPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/DoesUserHasAllPermissions", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesUserHasAllPermissions(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories) {
            object[] results = this.Invoke("DoesUserHasAllPermissions", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoesUserHasAllPermissionsAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories) {
            this.DoesUserHasAllPermissionsAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, delegationCategories, null);
        }
        
        /// <remarks/>
        public void DoesUserHasAllPermissionsAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, object userState) {
            if ((this.DoesUserHasAllPermissionsOperationCompleted == null)) {
                this.DoesUserHasAllPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesUserHasAllPermissionsOperationCompleted);
            }
            this.InvokeAsync("DoesUserHasAllPermissions", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories}, this.DoesUserHasAllPermissionsOperationCompleted, userState);
        }
        
        private void OnDoesUserHasAllPermissionsOperationCompleted(object arg) {
            if ((this.DoesUserHasAllPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesUserHasAllPermissionsCompleted(this, new DoesUserHasAllPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetRolesOfUserInViewApplication", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRolesOfUserInViewApplication(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, string viewValue, RoleCategories roleCategories, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetRolesOfUserInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        viewValue,
                        roleCategories,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesOfUserInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, string viewValue, RoleCategories roleCategories, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetRolesOfUserInViewApplicationAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, viewValue, roleCategories, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetRolesOfUserInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, string viewValue, RoleCategories roleCategories, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetRolesOfUserInViewApplicationOperationCompleted == null)) {
                this.GetRolesOfUserInViewApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesOfUserInViewApplicationOperationCompleted);
            }
            this.InvokeAsync("GetRolesOfUserInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        viewValue,
                        roleCategories,
                        delegationCategories,
                        extraAttributes}, this.GetRolesOfUserInViewApplicationOperationCompleted, userState);
        }
        
        private void OnGetRolesOfUserInViewApplicationOperationCompleted(object arg) {
            if ((this.GetRolesOfUserInViewApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesOfUserInViewApplicationCompleted(this, new GetRolesOfUserInViewApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetOUScopesOfUserRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOUScopesOfUserRoles(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetOUScopesOfUserRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOUScopesOfUserRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetOUScopesOfUserRolesAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, roleValues, roleCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetOUScopesOfUserRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetOUScopesOfUserRolesOperationCompleted == null)) {
                this.GetOUScopesOfUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOUScopesOfUserRolesOperationCompleted);
            }
            this.InvokeAsync("GetOUScopesOfUserRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes}, this.GetOUScopesOfUserRolesOperationCompleted, userState);
        }
        
        private void OnGetOUScopesOfUserRolesOperationCompleted(object arg) {
            if ((this.GetOUScopesOfUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOUScopesOfUserRolesCompleted(this, new GetOUScopesOfUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetsBusinessScopesOfUserRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetsBusinessScopesOfUserRoles(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetsBusinessScopesOfUserRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetsBusinessScopesOfUserRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetsBusinessScopesOfUserRolesAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, roleValues, roleCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetsBusinessScopesOfUserRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetsBusinessScopesOfUserRolesOperationCompleted == null)) {
                this.GetsBusinessScopesOfUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetsBusinessScopesOfUserRolesOperationCompleted);
            }
            this.InvokeAsync("GetsBusinessScopesOfUserRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes}, this.GetsBusinessScopesOfUserRolesOperationCompleted, userState);
        }
        
        private void OnGetsBusinessScopesOfUserRolesOperationCompleted(object arg) {
            if ((this.GetsBusinessScopesOfUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetsBusinessScopesOfUserRolesCompleted(this, new GetsBusinessScopesOfUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetTimeScopesOfUserRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTimeScopesOfUserRoles(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetTimeScopesOfUserRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeScopesOfUserRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetTimeScopesOfUserRolesAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, roleValues, roleCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetTimeScopesOfUserRolesAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string roleValues, AccreditCategory roleCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetTimeScopesOfUserRolesOperationCompleted == null)) {
                this.GetTimeScopesOfUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeScopesOfUserRolesOperationCompleted);
            }
            this.InvokeAsync("GetTimeScopesOfUserRoles", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleValues,
                        roleCategory,
                        delegationCategories,
                        extraAttributes}, this.GetTimeScopesOfUserRolesOperationCompleted, userState);
        }
        
        private void OnGetTimeScopesOfUserRolesOperationCompleted(object arg) {
            if ((this.GetTimeScopesOfUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeScopesOfUserRolesCompleted(this, new GetTimeScopesOfUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetOuScopesOfUserFunctionsInViewApplication", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOuScopesOfUserFunctionsInViewApplication(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetOuScopesOfUserFunctionsInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOuScopesOfUserFunctionsInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetOuScopesOfUserFunctionsInViewApplicationAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetOuScopesOfUserFunctionsInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetOuScopesOfUserFunctionsInViewApplicationOperationCompleted == null)) {
                this.GetOuScopesOfUserFunctionsInViewApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOuScopesOfUserFunctionsInViewApplicationOperationCompleted);
            }
            this.InvokeAsync("GetOuScopesOfUserFunctionsInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes}, this.GetOuScopesOfUserFunctionsInViewApplicationOperationCompleted, userState);
        }
        
        private void OnGetOuScopesOfUserFunctionsInViewApplicationOperationCompleted(object arg) {
            if ((this.GetOuScopesOfUserFunctionsInViewApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOuScopesOfUserFunctionsInViewApplicationCompleted(this, new GetOuScopesOfUserFunctionsInViewApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetBusinessScopesByUserFunctionsInViewApplication", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessScopesByUserFunctionsInViewApplication(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetBusinessScopesByUserFunctionsInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessScopesByUserFunctionsInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetBusinessScopesByUserFunctionsInViewApplicationAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetBusinessScopesByUserFunctionsInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetBusinessScopesByUserFunctionsInViewApplicationOperationCompleted == null)) {
                this.GetBusinessScopesByUserFunctionsInViewApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessScopesByUserFunctionsInViewApplicationOperationCompleted);
            }
            this.InvokeAsync("GetBusinessScopesByUserFunctionsInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes}, this.GetBusinessScopesByUserFunctionsInViewApplicationOperationCompleted, userState);
        }
        
        private void OnGetBusinessScopesByUserFunctionsInViewApplicationOperationCompleted(object arg) {
            if ((this.GetBusinessScopesByUserFunctionsInViewApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessScopesByUserFunctionsInViewApplicationCompleted(this, new GetBusinessScopesByUserFunctionsInViewApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetTimeScopesByUserFunctionsInViewApplication", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTimeScopesByUserFunctionsInViewApplication(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetTimeScopesByUserFunctionsInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeScopesByUserFunctionsInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetTimeScopesByUserFunctionsInViewApplicationAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, funcValues, funcCategory, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetTimeScopesByUserFunctionsInViewApplicationAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string funcValues, AccreditCategory funcCategory, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetTimeScopesByUserFunctionsInViewApplicationOperationCompleted == null)) {
                this.GetTimeScopesByUserFunctionsInViewApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeScopesByUserFunctionsInViewApplicationOperationCompleted);
            }
            this.InvokeAsync("GetTimeScopesByUserFunctionsInViewApplication", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        funcValues,
                        funcCategory,
                        delegationCategories,
                        extraAttributes}, this.GetTimeScopesByUserFunctionsInViewApplicationOperationCompleted, userState);
        }
        
        private void OnGetTimeScopesByUserFunctionsInViewApplicationOperationCompleted(object arg) {
            if ((this.GetTimeScopesByUserFunctionsInViewApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeScopesByUserFunctionsInViewApplicationCompleted(this, new GetTimeScopesByUserFunctionsInViewApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/IsAdminUser", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAdminUser(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, DelegationCategories delegationCategories) {
            object[] results = this.Invoke("IsAdminUser", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        delegationCategories});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAdminUserAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, DelegationCategories delegationCategories) {
            this.IsAdminUserAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, delegationCategories, null);
        }
        
        /// <remarks/>
        public void IsAdminUserAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, DelegationCategories delegationCategories, object userState) {
            if ((this.IsAdminUserOperationCompleted == null)) {
                this.IsAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAdminUserOperationCompleted);
            }
            this.InvokeAsync("IsAdminUser", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        delegationCategories}, this.IsAdminUserOperationCompleted, userState);
        }
        
        private void OnIsAdminUserOperationCompleted(object arg) {
            if ((this.IsAdminUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAdminUserCompleted(this, new IsAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetBusinessScopes", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessScopes(string scopeValues, AccreditCategory scopeValueCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string extraAttributes) {
            object[] results = this.Invoke("GetBusinessScopes", new object[] {
                        scopeValues,
                        scopeValueCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessScopesAsync(string scopeValues, AccreditCategory scopeValueCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string extraAttributes) {
            this.GetBusinessScopesAsync(scopeValues, scopeValueCategory, appValue, appCategory, viewValue, viewCategory, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetBusinessScopesAsync(string scopeValues, AccreditCategory scopeValueCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string extraAttributes, object userState) {
            if ((this.GetBusinessScopesOperationCompleted == null)) {
                this.GetBusinessScopesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessScopesOperationCompleted);
            }
            this.InvokeAsync("GetBusinessScopes", new object[] {
                        scopeValues,
                        scopeValueCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        extraAttributes}, this.GetBusinessScopesOperationCompleted, userState);
        }
        
        private void OnGetBusinessScopesOperationCompleted(object arg) {
            if ((this.GetBusinessScopesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessScopesCompleted(this, new GetBusinessScopesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetTimeScopes", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTimeScopes(string scopeValues, AccreditCategory scopeValueCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string extraAttributes) {
            object[] results = this.Invoke("GetTimeScopes", new object[] {
                        scopeValues,
                        scopeValueCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeScopesAsync(string scopeValues, AccreditCategory scopeValueCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string extraAttributes) {
            this.GetTimeScopesAsync(scopeValues, scopeValueCategory, appValue, appCategory, viewValue, viewCategory, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetTimeScopesAsync(string scopeValues, AccreditCategory scopeValueCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, string extraAttributes, object userState) {
            if ((this.GetTimeScopesOperationCompleted == null)) {
                this.GetTimeScopesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeScopesOperationCompleted);
            }
            this.InvokeAsync("GetTimeScopes", new object[] {
                        scopeValues,
                        scopeValueCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        extraAttributes}, this.GetTimeScopesOperationCompleted, userState);
        }
        
        private void OnGetTimeScopesOperationCompleted(object arg) {
            if ((this.GetTimeScopesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeScopesCompleted(this, new GetTimeScopesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetFunctionsOfUser", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFunctionsOfUser(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, FunctionCategories functionCategories, DelegationCategories delegationCategories, string extraAttributes) {
            object[] results = this.Invoke("GetFunctionsOfUser", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        functionCategories,
                        delegationCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFunctionsOfUserAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, FunctionCategories functionCategories, DelegationCategories delegationCategories, string extraAttributes) {
            this.GetFunctionsOfUserAsync(userValue, userCategory, parentOrganizationValue, organizationCategory, appValue, appCategory, viewValue, viewCategory, functionCategories, delegationCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetFunctionsOfUserAsync(string userValue, UserCategory userCategory, string parentOrganizationValue, OrganizationCategory organizationCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, FunctionCategories functionCategories, DelegationCategories delegationCategories, string extraAttributes, object userState) {
            if ((this.GetFunctionsOfUserOperationCompleted == null)) {
                this.GetFunctionsOfUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFunctionsOfUserOperationCompleted);
            }
            this.InvokeAsync("GetFunctionsOfUser", new object[] {
                        userValue,
                        userCategory,
                        parentOrganizationValue,
                        organizationCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        functionCategories,
                        delegationCategories,
                        extraAttributes}, this.GetFunctionsOfUserOperationCompleted, userState);
        }
        
        private void OnGetFunctionsOfUserOperationCompleted(object arg) {
            if ((this.GetFunctionsOfUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFunctionsOfUserCompleted(this, new GetFunctionsOfUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("10.53.1.162/GetRoles", RequestNamespace="10.53.1.162", ResponseNamespace="10.53.1.162", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRoles(string roleValues, AccreditCategory roleCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, RoleCategories roleCategories, string extraAttributes) {
            object[] results = this.Invoke("GetRoles", new object[] {
                        roleValues,
                        roleCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleCategories,
                        extraAttributes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesAsync(string roleValues, AccreditCategory roleCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, RoleCategories roleCategories, string extraAttributes) {
            this.GetRolesAsync(roleValues, roleCategory, appValue, appCategory, viewValue, viewCategory, roleCategories, extraAttributes, null);
        }
        
        /// <remarks/>
        public void GetRolesAsync(string roleValues, AccreditCategory roleCategory, string appValue, AccreditCategory appCategory, string viewValue, AccreditCategory viewCategory, RoleCategories roleCategories, string extraAttributes, object userState) {
            if ((this.GetRolesOperationCompleted == null)) {
                this.GetRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesOperationCompleted);
            }
            this.InvokeAsync("GetRoles", new object[] {
                        roleValues,
                        roleCategory,
                        appValue,
                        appCategory,
                        viewValue,
                        viewCategory,
                        roleCategories,
                        extraAttributes}, this.GetRolesOperationCompleted, userState);
        }
        
        private void OnGetRolesOperationCompleted(object arg) {
            if ((this.GetRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesCompleted(this, new GetRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="10.53.1.162")]
    public enum AccreditCategory {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Guid = 2,
        
        /// <remarks/>
        Code = 4,
        
        /// <remarks/>
        Level = 8,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="10.53.1.162")]
    public enum FunctionCategories {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Inside = 2,
        
        /// <remarks/>
        Exterior = 4,
        
        /// <remarks/>
        All = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="10.53.1.162")]
    public enum OrganizationCategory {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        OrgGuid,
        
        /// <remarks/>
        OrgOriginalSort,
        
        /// <remarks/>
        OrgAllPathName,
        
        /// <remarks/>
        OrgGlobalSort,
        
        /// <remarks/>
        OrgCustomsCode,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="10.53.1.162")]
    public enum DelegationCategories {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Original = 2,
        
        /// <remarks/>
        Delegated = 4,
        
        /// <remarks/>
        All = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="10.53.1.162")]
    public enum UserCategory {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        UserGuid,
        
        /// <remarks/>
        UserOriginalSort,
        
        /// <remarks/>
        UserAllPathName,
        
        /// <remarks/>
        UserGlobalSort,
        
        /// <remarks/>
        UserIdentity,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="10.53.1.162")]
    public enum RoleCategories {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        System = 2,
        
        /// <remarks/>
        Application = 4,
        
        /// <remarks/>
        All = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetApplicationsCompletedEventHandler(object sender, GetApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFunctionsInApplicationCompletedEventHandler(object sender, GetFunctionsInApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFunctionsInApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFunctionsInApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetChildrenInRolesCompletedEventHandler(object sender, GetChildrenInRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildrenInRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildrenInRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRolesByFunctionCompletedEventHandler(object sender, GetRolesByFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesByFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesByFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsersByFunctionCompletedEventHandler(object sender, GetUsersByFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersByFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersByFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsUserInRolesCompletedEventHandler(object sender, IsUserInRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserInRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserInRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsUserInAllRolesCompletedEventHandler(object sender, IsUserInAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserInAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserInAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DoesUserHasPermissionsCompletedEventHandler(object sender, DoesUserHasPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesUserHasPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoesUserHasPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DoesUserHasAllPermissionsCompletedEventHandler(object sender, DoesUserHasAllPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesUserHasAllPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoesUserHasAllPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRolesOfUserInViewApplicationCompletedEventHandler(object sender, GetRolesOfUserInViewApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesOfUserInViewApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesOfUserInViewApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetOUScopesOfUserRolesCompletedEventHandler(object sender, GetOUScopesOfUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOUScopesOfUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOUScopesOfUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetsBusinessScopesOfUserRolesCompletedEventHandler(object sender, GetsBusinessScopesOfUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetsBusinessScopesOfUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetsBusinessScopesOfUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTimeScopesOfUserRolesCompletedEventHandler(object sender, GetTimeScopesOfUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeScopesOfUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeScopesOfUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetOuScopesOfUserFunctionsInViewApplicationCompletedEventHandler(object sender, GetOuScopesOfUserFunctionsInViewApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOuScopesOfUserFunctionsInViewApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOuScopesOfUserFunctionsInViewApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBusinessScopesByUserFunctionsInViewApplicationCompletedEventHandler(object sender, GetBusinessScopesByUserFunctionsInViewApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessScopesByUserFunctionsInViewApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessScopesByUserFunctionsInViewApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTimeScopesByUserFunctionsInViewApplicationCompletedEventHandler(object sender, GetTimeScopesByUserFunctionsInViewApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeScopesByUserFunctionsInViewApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeScopesByUserFunctionsInViewApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsAdminUserCompletedEventHandler(object sender, IsAdminUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBusinessScopesCompletedEventHandler(object sender, GetBusinessScopesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessScopesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessScopesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTimeScopesCompletedEventHandler(object sender, GetTimeScopesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeScopesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeScopesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFunctionsOfUserCompletedEventHandler(object sender, GetFunctionsOfUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFunctionsOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFunctionsOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRolesCompletedEventHandler(object sender, GetRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591